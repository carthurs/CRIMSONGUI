/**
\page md_page2 CRIMSON build instructions for Windows (VS2015)

# Dependencies to install before building CRIMSON

Before building CRIMSON software itself you will need to download and install the following:

 
 - Git - 2.19.2 or later (https://git-scm.com/downloads)
 - Git LFS - 2.6.0 or later (https://git-lfs.github.com/)
 - CMake - 3.13.0 (https://cmake.org/download/)
 - Qt - 5.7 (exactly) - best to install using Qt's Unified Windows Installer. From all the components under 5.7 you only need "msvc2015 64-bit", "Qt WebEngine" and "Qt Script"
 - Visual Studio - VS2015 
 
For installing the above software follow the instructions as provided by their publisher.
 
Please note that the CRIMSON build procedure has been tested and is supported for the versions of software mentioned above. While it might be possible to succesfully build CRIMSON using other versions of Git, Git LFS, CMake or Visual Studio it is not necessary that the CRIMSON build steps as described below would be sufficient, so proceed at your own responsibility.


# Building CRIMSON

## Setup the project directory

Create a root folder in which the source code and build will be stored.
The root folder for the project should be as short as possible (due to some limitations of the Windows command line). 
For example, a source folder like "D:\crimson" and a build folder like "d:\crimson\sb" should be good enough.

## Get the source code via Git

Get the source code via git by cloning into the root folder selected above by following these steps:

1. Open the Windows Command Prompt (Windows -> type "cmd" -> press Enter)
2. Change the current working directory to the location of project root directory. e.g. for root directory "d:\crimson" type "cd d/crimson" into the command prompt
3. Type "git clone https://yourusername@bitbucket.org/cafa/crimson.git ." and press Enter
4. Enter your bitbucket password when prompted

## Generate project files with CMake

1. In the root folder of the CRIMSON project create a new folder for the build, e.g. "d:\crimson\sb".
2. Open the CMake desktop app.
3. Under "Where is the source code" enter the path to the CRIMSON root folder (e.g. "d:\crimson")
4. Under "Where to build the binaries" enter the path to the CRIMSON build folder you created just recently (e.g. "d:\crimson\sb")
5. Press "Configure"
6. In the new window that pops up, under "Specify the generator for this project" select "Visual Studio 14 2015 Win64". Leave the remaining settings as they are and press "Finish"
7. An error message pops up. Press okay to continue.
7. The large window in the centre now contains pairs of variable names and values colored red, some of which need to be manually set for a succesfull build. Find a variable "Qt5_DIR" and set it to "C:\Qt\5.7\msvc2013_64\lib\cmake\Qt5" (assuming that you installed Qt in the default directory "C:\Qt", otherwise replace the "Qt" part by the path which you chose during Qt installation)
6. Change CMAKE_BUILD_TYPE as desired (Release, Debug or RelWithDebInfo). Leave other variables as they are. 
7. Press "Configure"
8. Additional variables that can be modified appear now. You need to manually specify the locations of flowsolver and presolver:
For "flowsolver_folder" enter e.g. "d:/crimson/sb/CMakeExternals/Source/flowsolver".
For "presolver_executable" enter e.g. "d:/crimson/sb/CMakeExternals/Source/presolver/presolver.exe".
In variables above replace "d:/crimson/sb" with your own custom location of CRIMSON superbuild folder as necessary.
9. Press "Configure"
10. Press "Generate"

## Build your project in Visual Studio

1. Open the build folder of the project which you have previously created (in our example this is "d:\crimson\sb").
The folder contains project files which were generated by CMake for our selected version of Visual Studio (2015). The Visual Studio files here belong to the superbuild (build configuration which automatically builds CRIMSON and MITK with all of the external dependencies of both. Note here that while external dependencies of CRIMSON include MITK, MITK also has it's own external dependencies as well). 
Inside the overall superbuild configuration of CRIMSON project, MITK and it's dependencies are being built in a superbuild of their own (inside the folder "MITK-superbuild"). Project files for building of external dependencies of CRIMSON are located in folder "CMakeExternals". The project files for building of CRIMSON core are in folder "CRIMSON-build".
2. In this main build folder ("d:\crimson\sb") open the file named "CRIMSON-superbuild" of the type "Microsoft Visual Studio Solution". This opens the superbuild project in Visual Studio.
3. Make sure that the build type selected in Visual Studio matches the build type you determined in CMake (sometimes these types do not automatically match).
***IMAGE*****
4. In the Solution Explorer pane on the right, right-click the "ALL_BUILD" node and press "Build"
***IMAGE*****
5. Wait for all the project files to build. You can observe the progress in the "Output" window.

## Run the built project inside Visual Studio

1. In order to run CRIMSON from Visual Studio (e.g. for debugging purposes) navigate to the CRIMSON build folder ("d:\crimson\sb\CRIMSON-build") and open the file named "CRIMSON" of the type "Microsoft Visual Studio Solution". This opens the CRIMSON core build project in Visual Studio.
2. Right-click on the node "CRIMSON" in Solution Explorer and select "Set as StartUp project"
3. You are now ready to run/debug CRIMSON from within Visual Studio

## Building CRIMSON install files (packaging)

1. Open the CRIMSON core project from the CRIMSON-build folder (step 1. from the previous paragraph).
2. In Solution Explorer right-click the node "PACKAGE" and select "Build".
3. Wait for the project to be packaged and install files generated. You can observe the progress in the "Output" window.
4. Once the packaging has succesfully finished the install file can be found in the CRIMSON-build folder.



*/
